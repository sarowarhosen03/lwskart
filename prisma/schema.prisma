// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  cart          Cart?           @relation(fields: [cartId], references: [id])
  orders        Order[]
  wishItem      WishItem[]
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  address       Address[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  cartId        String?         @db.ObjectId
  Review        Review[]
}

model Address {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId     String  @db.ObjectId
  name       String
  phone      String
  address    String
  city       String
  postalCode String
  country    String
  default    Boolean @default(false)
  User       User    @relation(fields: [userId], references: [id])
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  identifier String            @unique
  token      String
  expires    DateTime
  type       VERIFICATION_TYPE @default(EMAIL_VERIFY)

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  credentialID         String // Make sure this field is defined

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model WishItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  product     Product? @relation(fields: [productId], references: [id])
  whishlistId String?  @db.ObjectId
  productId   String?  @db.ObjectId
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
}

model Order {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  invoice    Invoice?     @relation(fields: [invoiceId], references: [id])
  createdAt  DateTime     @default(now())
  User       User?        @relation(fields: [userId], references: [id])
  userId     String?      @db.ObjectId
  invoiceId  String?      @db.ObjectId
  orderItems OrderItems[]
}

model OrderItems {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  Product   Product? @relation(fields: [productId], references: [id])
  quantity  Int?
  size      Int?
  price     Int?
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?  @db.ObjectId
  productId String?  @db.ObjectId
}

model Invoice {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  amount        Int
  createdAt     DateTime  @default(now())
  Order         Order[]
  paymentMethod PayMethod
  trxid         String
}

model Cart {
  id    String      @id @default(auto()) @map("_id") @db.ObjectId
  items CartItems[]
  User  User[]
}

model CartItems {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
  itemCount Int      @default(1)
  Cart      Cart?    @relation(fields: [cartId], references: [id])
  cartId    String?  @db.ObjectId
  productId String?  @db.ObjectId
}

model Product {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String[]
  price          Float
  discount_price Float       @default(0)
  reviewsNumber  Int         @default(0)
  ratings        Float
  reviews        Review[]
  availability   Boolean
  stock          Int         @default(0)
  brand          Brand?      @relation(fields: [brandId], references: [id])
  category       Category?   @relation(fields: [categoryId], references: [id])
  details        Json
  description    String
  sizes          String[]
  colors         String[]
  sku            Int         @unique
  soldCounts     Int
  categoryId     String?     @db.ObjectId
  tags           String[]
  brandId        String?     @db.ObjectId
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  CartItems      CartItems[]
  wishItem       WishItem[]

  OrderItems OrderItems[]
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  product   Product[]
  thumbnail String
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  Product   Product[]
  createdAt DateTime  @default(now())
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  review    String
  user      User?    @relation(fields: [userId], references: [id])
  rating    Int      @default(1)
  // other fields...
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PayMethod {
  BKASH
  NAGAD
  ROCKET
  CARD
}

enum VERIFICATION_TYPE {
  EMAIL_VERIFY
  PASSWORD_RESET
}
